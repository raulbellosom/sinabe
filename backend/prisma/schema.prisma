generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  users       User[]
}

model User {
  id                String         @id @default(uuid())
  firstName         String
  lastName          String
  email             String         @unique
  userName          String         @unique
  phone             String?
  password          String
  status            Boolean?
  roleId            Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  enabled           Boolean        @default(true)
  inventories       Inventory[]
  role              Role           @relation(fields: [roleId], references: [id])
  photo             UserImage[]    @relation("UserImages")
  assignedDeadlines Deadline[]     @relation("DeadlineUsers")
  assignedTasks     DeadlineTask[] @relation("TaskUsers")

  @@index([roleId], map: "User_roleId_fkey")
}

model Inventory {
  id                String                 @id @default(uuid())
  status            Status
  createdById       String
  activeNumber      String?
  serialNumber      String?
  comments          String?                @db.Text
  modelId           Int
  enabled           Boolean                @default(true)
  receptionDate     DateTime?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  details           Json?
  altaDate          DateTime?
  bajaDate          DateTime?
  internalFolio     String?                @unique
  projectId         String?
  files             File[]
  images            Image[]                @relation("InventoryImages")
  createdBy         User                   @relation(fields: [createdById], references: [id])
  model             Model                  @relation(fields: [modelId], references: [id])
  project           Project?               @relation("ProjectInventories", fields: [projectId], references: [id])
  conditions        InventoryCondition[]
  customField       InventoryCustomField[]
  InventoryDeadline InventoryDeadline[]

  @@index([createdById], map: "Inventory_createdById_fkey")
  @@index([modelId], map: "Inventory_modelId_fkey")
  @@index([projectId], map: "Inventory_projectId_fkey")
}

model InventoryType {
  id      Int     @id @default(autoincrement())
  enabled Boolean @default(true)
  name    String
  models  Model[]
}

model InventoryBrand {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)
  models  Model[]
}

model Model {
  id          Int            @id @default(autoincrement())
  name        String
  typeId      Int
  brandId     Int
  enabled     Boolean        @default(true)
  inventories Inventory[]
  brand       InventoryBrand @relation(fields: [brandId], references: [id])
  type        InventoryType  @relation(fields: [typeId], references: [id])

  @@index([brandId], map: "Model_brandId_fkey")
  @@index([typeId], map: "Model_typeId_fkey")
}

model CustomField {
  id          Int                    @id @default(autoincrement())
  name        String
  enabled     Boolean                @default(true)
  createdAt   DateTime               @default(now())
  inventories InventoryCustomField[]
}

model InventoryCustomField {
  id            Int         @id @default(autoincrement())
  inventoryId   String
  customFieldId Int
  value         String
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  inventory     Inventory   @relation(fields: [inventoryId], references: [id])

  @@unique([inventoryId, customFieldId])
  @@index([customFieldId], map: "InventoryCustomField_customFieldId_fkey")
}

model Project {
  id             String            @id @default(uuid())
  code           String            @unique
  name           String
  description    String?
  provider       String
  status         ProjectStatus
  budgetTotal    Float
  budgetUsed     Float             @default(0)
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  enabled        Boolean           @default(true)
  createdById    String
  deadlines      Deadline[]
  inventories    Inventory[]       @relation("ProjectInventories")
  documents      ProjectDocument[]
  teamMembers    ProjectMember[]
  purchaseOrders PurchaseOrder[]
  verticals      ProjectVertical[] @relation("ProjectVerticalsOnProjects")
}

model Deadline {
  id                   String              @id @default(uuid())
  name                 String
  description          String?
  status               DeadlineStatus
  dueDate              DateTime
  projectId            String
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  enabled              Boolean             @default(true)
  createdById          String
  order                Int
  project              Project             @relation(fields: [projectId], references: [id])
  tasks                DeadlineTask[]
  inventoryAssignments InventoryDeadline[]
  users                User[]              @relation("DeadlineUsers")

  @@index([projectId], map: "Deadline_projectId_fkey")
}

model DeadlineTask {
  id          String     @id @default(uuid())
  name        String
  date        DateTime
  deadlineId  String
  enabled     Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  createdById String
  description String?
  order       Int
  status      TaskStatus @default(PENDIENTE)
  deadline    Deadline   @relation(fields: [deadlineId], references: [id])
  users       User[]     @relation("TaskUsers")

  @@index([deadlineId], map: "DeadlineTask_deadlineId_fkey")
}

model InventoryDeadline {
  id          String    @id @default(uuid())
  inventoryId String
  deadlineId  String
  deadline    Deadline  @relation(fields: [deadlineId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@index([deadlineId], map: "InventoryDeadline_deadlineId_fkey")
  @@index([inventoryId], map: "InventoryDeadline_inventoryId_fkey")
}

model PurchaseOrder {
  id          String    @id @default(uuid())
  code        String    @unique
  supplier    String
  description String?
  amount      Float
  status      String
  date        DateTime
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enabled     Boolean   @default(true)
  createdById String
  invoices    Invoice[]
  project     Project   @relation(fields: [projectId], references: [id])

  @@index([projectId], map: "PurchaseOrder_projectId_fkey")
}

model Invoice {
  id              Int           @id @default(autoincrement())
  code            String
  concept         String
  amount          Float
  status          String
  date            DateTime
  fileUrl         String?
  purchaseOrderId String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  enabled         Boolean       @default(true)
  createdById     String
  purchaseOrder   PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])

  @@index([purchaseOrderId], map: "Invoice_purchaseOrderId_fkey")
}

model ProjectMember {
  id        String  @id @default(uuid())
  role      String
  name      String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@index([projectId], map: "ProjectMember_projectId_fkey")
}

model ProjectDocument {
  id          String   @id @default(uuid())
  name        String
  fileUrl     String
  description String?
  metadata    Json?
  enabled     Boolean  @default(true)
  uploadDate  DateTime
  projectId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  project     Project  @relation(fields: [projectId], references: [id])

  @@index([projectId], map: "ProjectDocument_projectId_fkey")
}

model ProjectVertical {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  enabled  Boolean   @default(true)
  projects Project[] @relation("ProjectVerticalsOnProjects")
}

model File {
  id          String    @id @default(uuid())
  inventoryId String
  metadata    Json?
  uploadedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  enabled     Boolean   @default(true)
  type        String
  url         String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId], map: "File_inventoryId_fkey")
}

model Condition {
  id          Int                  @id @default(autoincrement())
  name        String
  enabled     Boolean              @default(true)
  inventories InventoryCondition[]
}

model InventoryCondition {
  id          Int       @id @default(autoincrement())
  inventoryId String
  conditionId Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@unique([inventoryId, conditionId])
  @@index([conditionId], map: "InventoryCondition_conditionId_fkey")
}

model Image {
  id          String     @id @default(uuid())
  url         String
  thumbnail   String?
  type        String
  metadata    Json?
  createdAt   DateTime   @default(now())
  enabled     Boolean    @default(true)
  inventoryId String?
  inventory   Inventory? @relation("InventoryImages", fields: [inventoryId], references: [id])

  @@index([inventoryId])
}

model UserImage {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserImages", fields: [userId], references: [id])

  @@index([userId])
}

enum Status {
  ALTA
  BAJA
  PROPUESTA
}

enum DeadlineStatus {
  PENDIENTE
  EN_PROGRESO
  EN_REVISION
  COMPLETADO
  CANCELADO
  BLOQUEADO
}

enum ProjectStatus {
  PLANIFICACION
  EN_EJECUCION
  EN_REVISION
  FINALIZADO
  CANCELADO
  PAUSADO
}

enum TaskStatus {
  PENDIENTE
  EN_PROGRESO
  COMPLETADO
  CANCELADO
}
