generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String
  permissions RolePermission[]
  users       User[]
}

model User {
  id          String      @id @default(uuid())
  firstName   String
  lastName    String
  email       String      @unique
  userName    String      @unique
  phone       String?
  password    String
  status      Boolean?
  roleId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  enabled     Boolean     @default(true)
  inventories Inventory[]
  role        Role        @relation(fields: [roleId], references: [id])
  photo       UserImage[] @relation("UserImages")

  @@index([roleId], map: "User_roleId_fkey")
}

model Inventory {
  id            String                 @id @default(uuid())
  status        Status
  createdById   String
  internalFolio String?                @unique
  activeNumber  String?
  serialNumber  String?
  comments      String?                @db.Text
  modelId       Int
  projectId   Int? 
  enabled       Boolean                @default(true)
  receptionDate DateTime?
  altaDate      DateTime?
  bajaDate      DateTime?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  details       Json? //este campo no se utiliza
  files         File[]
  images        Image[]                @relation("InventoryImages")
  createdBy     User                   @relation(fields: [createdById], references: [id])
  model         Model                  @relation(fields: [modelId], references: [id])
  conditions    InventoryCondition[]
  customField   InventoryCustomField[]
  project     Project?     @relation("ProjectInventories", fields: [projectId], references: [id])


  @@index([createdById], map: "Inventory_createdById_fkey")
  @@index([modelId], map: "Inventory_modelId_fkey")
  InventoryDeadline InventoryDeadline[]
}

model InventoryType {
  id      Int     @id @default(autoincrement())
  enabled Boolean @default(true)
  name    String
  models  Model[]
}

model InventoryBrand {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)
  models  Model[]
}

model Model {
  id          Int            @id @default(autoincrement())
  name        String
  typeId      Int
  brandId     Int
  enabled     Boolean        @default(true)
  inventories Inventory[]
  brand       InventoryBrand @relation(fields: [brandId], references: [id])
  type        InventoryType  @relation(fields: [typeId], references: [id])

  @@index([brandId], map: "Model_brandId_fkey")
  @@index([typeId], map: "Model_typeId_fkey")
}

model CustomField {
  id          Int                    @id @default(autoincrement())
  name        String
  enabled     Boolean                @default(true)
  createdAt   DateTime               @default(now())
  inventories InventoryCustomField[]
}

model InventoryCustomField {
  id            Int         @id @default(autoincrement())
  inventoryId   String
  customFieldId Int
  value         String
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  inventory     Inventory   @relation(fields: [inventoryId], references: [id])

  @@unique([inventoryId, customFieldId])
  @@index([customFieldId], map: "InventoryCustomField_customFieldId_fkey")
}

model Project {
  id            Int              @id @default(autoincrement())
  code          String           @unique // Ej: PROJ-001
  name          String
  description   String?
  provider      String
  status        String           // En progreso, Completado, Planificación
  budgetTotal   Float
  budgetUsed    Float            @default(0)
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  enabled       Boolean          @default(true)
  createdById   String

  deadlines       Deadline[]
  purchaseOrders  PurchaseOrder[]
  documents       ProjectDocument[]
  inventories     Inventory[]      @relation("ProjectInventories")
  teamMembers     ProjectMember[]
  verticals     ProjectVertical[] @relation("ProjectVerticalsOnProjects")
}

model Deadline {
  id         Int             @id @default(autoincrement())
  name       String          // Ej: Suministro, Instalación
  description String?
  status     String          // Completado, En progreso, Pendiente
  responsible String?
  dueDate    DateTime
  projectId  Int
  project    Project         @relation(fields: [projectId], references: [id])
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  enabled    Boolean         @default(true)
  createdById String

  inventoryAssignments InventoryDeadline[]
  tasks      DeadlineTask[]
}

model DeadlineTask {
  id         Int        @id @default(autoincrement())
  name       String
  date       DateTime
  deadlineId Int
  deadline   Deadline   @relation(fields: [deadlineId], references: [id])
  enabled    Boolean    @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  createdById String
}

model InventoryDeadline {
  id           Int        @id @default(autoincrement())
  inventoryId  String
  deadlineId   Int
  inventory    Inventory  @relation(fields: [inventoryId], references: [id])
  deadline     Deadline   @relation(fields: [deadlineId], references: [id])
}

model PurchaseOrder {
  id          Int       @id @default(autoincrement())
  code        String    @unique // Ej: OC-2025-001
  supplier    String
  description String?
  amount      Float
  status      String    // Aprobada, En proceso, Rechazada
  date        DateTime
  projectId   Int
  project     Project   @relation(fields: [projectId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  enabled     Boolean   @default(true)
  createdById String

  invoices    Invoice[]
}

model Invoice {
  id             Int       @id @default(autoincrement())
  code           String    // Ej: INV-001
  concept        String
  amount         Float
  status         String    // Pagada, Pendiente
  date           DateTime
  fileUrl        String?
  purchaseOrderId Int
  purchaseOrder  PurchaseOrder @relation(fields: [purchaseOrderId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  enabled        Boolean   @default(true)
  createdById    String
}

model ProjectMember {
  id         Int      @id @default(autoincrement())
  role       String   // Project Manager, Instalador, etc
  name       String
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id])
}

model ProjectDocument {
  id         Int      @id @default(autoincrement())
  name       String
  fileUrl    String
  description String?
  metadata   Json?
  enabled    Boolean  @default(true)
  uploadDate DateTime
  projectId  Int
  project    Project  @relation(fields: [projectId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  createdById String
}

model ProjectVertical {
  id        Int     @id @default(autoincrement())
  name      String  @unique
  enabled   Boolean @default(true)
  projects  Project[] @relation("ProjectVerticalsOnProjects")
}

model File {
  id          String    @id @default(uuid())
  inventoryId String
  metadata    Json?
  uploadedAt  DateTime  @default(now())
  createdAt   DateTime  @default(now())
  enabled     Boolean   @default(true)
  type        String
  url         String
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@index([inventoryId], map: "File_inventoryId_fkey")
}

model Condition {
  id          Int                  @id @default(autoincrement())
  name        String
  enabled     Boolean              @default(true)
  inventories InventoryCondition[]
}

model InventoryCondition {
  id          Int       @id @default(autoincrement())
  inventoryId String
  conditionId Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  @@unique([inventoryId, conditionId])
  @@index([conditionId], map: "InventoryCondition_conditionId_fkey")
}

model Image {
  id          String     @id @default(uuid())
  url         String
  thumbnail   String?
  type        String
  metadata    Json?
  createdAt   DateTime   @default(now())
  enabled     Boolean    @default(true)
  inventoryId String?
  inventory   Inventory? @relation("InventoryImages", fields: [inventoryId], references: [id])

  @@index([inventoryId])
}

model UserImage {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserImages", fields: [userId], references: [id])

  @@index([userId])
}

enum Status {
  ALTA
  BAJA
  PROPUESTA
}
